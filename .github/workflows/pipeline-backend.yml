name: Selfcare Backend Pipeline

on:
  push:
    branches:
      - test/pipeline
    paths:
      - backend/**
      - config-server/**
      - discovery/**
      - gateway/**
      - notification/**
      - group/**
      - participant/**
      - 'docker-compose.yml'
      - .github/workflows/*-backend.yml

env:
  VERSION_CONFIG_SERVER: $(cd backend/config-server && ./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)
  VERSION_DISCOVERY: $(cd ../discovery && ./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)
  VERSION_GATEWAY: $(cd ../gateway && ./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)
  VERSION_NOTIFICATION: $(cd ../notification && ./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)
  VERSION_GROUP: $(cd ../group && ./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)
  VERSION_PARTICIPANT: $(cd ../participant && ./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)
  VERSION_MODERATOR: $(cd ../moderator && ./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)

jobs:
  compile:
    runs-on: self-hosted
    name: Compile microservice projects
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

  build:
    runs-on: self-hosted
    name: Build microservices
    needs: [compile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Compile microservice projects
        run: |
          cd backend/config-server
          ./mvnw clean compile
          cd ../discovery
          ./mvnw clean compile
          cd ../gateway
          ./mvnw clean compile
          cd ../notification
          ./mvnw clean compile
          cd ../group
          ./mvnw clean compile
          cd ../participant
          ./mvnw clean compile
          cd ../moderator
          ./mvnw package

  build-image:
    name: Build Docker image
    runs-on: self-hosted
    needs: [build]
    steps:
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
      #- name: Extract project version
        #id: extract_version
        #run: |
          #cd backend/config-server
          #echo "VERSION_CONFIG_SERVER=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
          #cd ../discovery
          #echo "VERSION_DISCOVERY=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
          #cd ../gateway
          #echo "VERSION_GATEWAY=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
          #cd ../notification
          #echo "VERSION_NOTIFICATION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
          #cd ../group
          #echo "VERSION_GROUP=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
          #cd ../participant
          #echo "VERSION_PARTICIPANT=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
          #cd ../moderator
          #echo "VERSION_MODERATOR=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push config-server to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: backend/config-server
          file: backend/config-server/Dockerfile
          push: true
          platforms: linux/amd64
          #tags: ${{ secrets.DOCKERHUB_USERNAME }}/selfcare-config-server-api:${{ steps.extract_version.outputs.VERSION_CONFIG_SERVER }},${{ secrets.DOCKERHUB_USERNAME }}/selfcare-config-server-api:latest
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/selfcare-config-server-api:$(VERSION_CONFIG_SERVER),${{ secrets.DOCKERHUB_USERNAME }}/selfcare-config-server-api:latest
          build-args: |
            PROFILE=dev
            APP_VERSION=${{ steps.extract_version.outputs.VERSION_CONFIG_SERVER }}

      - name: Build & Push discovery to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: backend/discovery
          file: backend/discovery/Dockerfile
          push: true
          platforms: linux/amd64
          #tags: ${{ secrets.DOCKERHUB_USERNAME }}/selfcare-discovery-api:${{ steps.extract_version.outputs.VERSION_DISCOVERY }},${{ secrets.DOCKERHUB_USERNAME }}/selfcare-discovery-api:latest
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/selfcare-discovery-api:$(VERSION_DISCOVERY),${{ secrets.DOCKERHUB_USERNAME }}/selfcare-discovery-api:latest
          build-args: |
            PROFILE=dev
            APP_VERSION=${{ steps.extract_version.outputs.VERSION_DISCOVERY }}

      - name: Build & Push gateway to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: backend/gateway
          file: backend/gateway/Dockerfile
          push: true
          platforms: linux/amd64
          #tags: ${{ secrets.DOCKERHUB_USERNAME }}/selfcare-gateway-api:${{ steps.extract_version.outputs.VERSION_GATEWAY }},${{ secrets.DOCKERHUB_USERNAME }}/selfcare-gateway-api:latest
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/selfcare-gateway-api:$(VERSION_GATEWAY),${{ secrets.DOCKERHUB_USERNAME }}/selfcare-gateway-api:latest
          build-args: |
            PROFILE=docker
            APP_VERSION=${{ steps.extract_version.outputs.VERSION_GATEWAY }}

      - name: Build & Push notification to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: backend/notification
          file: backend/notification/Dockerfile
          push: true
          platforms: linux/amd64
          #tags: ${{ secrets.DOCKERHUB_USERNAME }}/selfcare-notification-api:${{ steps.extract_version.outputs.VERSION_NOTIFICATION }},${{ secrets.DOCKERHUB_USERNAME }}/selfcare-notification-api:latest
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/selfcare-notification-api:$(VERSION_NOTIFICATION),${{ secrets.DOCKERHUB_USERNAME }}/selfcare-notification-api:latest
          build-args: |
            PROFILE=docker
            APP_VERSION=${{ steps.extract_version.outputs.VERSION_NOTIFICATION }}

      - name: Build & Push group to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: backend/group
          file: backend/group/Dockerfile
          push: true
          platforms: linux/amd64
          #tags: ${{ secrets.DOCKERHUB_USERNAME }}/selfcare-group-api:${{ steps.extract_version.outputs.VERSION_GROUP }},${{ secrets.DOCKERHUB_USERNAME }}/selfcare-group-api:latest
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/selfcare-group-api:$(VERSION_GROUP),${{ secrets.DOCKERHUB_USERNAME }}/selfcare-group-api:latest
          build-args: |
            PROFILE=docker
            APP_VERSION=${{ steps.extract_version.outputs.VERSION_GROUP }}

      - name: Build & Push participant to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: backend/participant
          file: backend/participant/Dockerfile
          push: true
          platforms: linux/amd64
          #tags: ${{ secrets.DOCKERHUB_USERNAME }}/selfcare-participant-api:${{ steps.extract_version.outputs.VERSION_PARTICIPANT }},${{ secrets.DOCKERHUB_USERNAME }}/selfcare-participant-api:latest
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/selfcare-participant-api:$(VERSION_PARTICIPANT),${{ secrets.DOCKERHUB_USERNAME }}/selfcare-participant-api:latest
          build-args: |
            PROFILE=docker
            APP_VERSION=${{ steps.extract_version.outputs.VERSION_PARTICIPANT }}

      - name: Build & Push moderator to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: backend/moderator
          file: backend/moderator/src/main/docker/Dockerfile.jvm
          push: true
          platforms: linux/amd64
          #tags: ${{ secrets.DOCKERHUB_USERNAME }}/selfcare-moderator-api:${{ steps.extract_version.outputs.VERSION_MODERATOR }},${{ secrets.DOCKERHUB_USERNAME }}/selfcare-moderator-api:latest
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/selfcare-moderator-api:$(VERSION_MODERATOR),${{ secrets.DOCKERHUB_USERNAME }}/selfcare-moderator-api:latest
          build-args: |
            PROFILE=dev
            APP_VERSION=${{ steps.extract_version.outputs.VERSION_MODERATOR }}
  
  deploy:
    name: Deploy Backend Microservices
    runs-on: self-hosted
    needs: [build-image]
    steps:

      - name: Create deployment folder
        run: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p deployment"

      - name: Copy docker-compose file
        run: scp -oStrictHostKeyChecking=no docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:deployment/docker-compose.yml

      #echo "VERSION_CONFIG_SERVER=${{ steps.extract_version.outputs.VERSION_CONFIG_SERVER }}
      #echo "VERSION_DISCOVERY=${{ steps.extract_version.outputs.VERSION_DISCOVERY }}
      #echo "VERSION_GATEWAY=${{ steps.extract_version.outputs.VERSION_GATEWAY }}
      #echo "VERSION_NOTIFICATION=${{ steps.extract_version.outputs.VERSION_NOTIFICATION }}
      #echo "VERSION_GROUP=${{ steps.extract_version.outputs.VERSION_GROUP }}
      #echo "VERSION_PARTICIPANT=${{ steps.extract_version.outputs.VERSION_PARTICIPANT }}
      #echo "VERSION_MODERATOR=${{ steps.extract_version.outputs.VERSION_MODERATOR }}
      - name: Deploy by docker compose
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
          echo "VPS_IP=${{ secrets.VPS_IP }}" > .env
          echo "VERSION_CONFIG_SERVER=0.0.1-SNAPSHOT" >> .env
          echo "VERSION_DISCOVERY=0.0.1-SNAPSHOT" >> .env
          echo "VERSION_GATEWAY=0.0.1-SNAPSHOT" >> .env
          echo "VERSION_NOTIFICATION=0.0.1-SNAPSHOT" >> .env
          echo "VERSION_GROUP=0.0.1-SNAPSHOT" >> .env
          echo "VERSION_PARTICIPANT=0.0.1-SNAPSHOT" >> .env
          echo "VERSION_MODERATOR=1.0.0-SNAPSHOT" >> .env
          cd deployment
          docker compose -f docker-compose.yml pull -q
          docker compose -f docker-compose.yml up -d
          EOF
